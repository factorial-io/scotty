{"id":"scotty-1","title":"Unified Output System - Complete Implementation","description":"Parent epic tracking the unified output system for logs and interactive shell access. Backend is complete, CLI logs working, but some frontend features and CLI shell command remain.","design":"See docs/prds/unified-output-system.md for complete technical specification. Current status: Phase 1-3.7 and Phase 5 complete, Phase 4 partially complete.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-25T00:58:21.660841+02:00","updated_at":"2025-10-25T00:58:21.660841+02:00"}
{"id":"scotty-10","title":"Instrument shell service with metrics","description":"Add metrics recording to ShellService for session counts, durations, errors, and timeouts.","design":"Instrument ShellService:\n- Track shell_sessions_active gauge\n- Increment shell_sessions_total counter\n- Record shell_session_duration histogram\n- Track shell_session_errors and timeouts","acceptance_criteria":"- Session metrics recorded correctly\n- Duration tracking works\n- Timeout cases tracked separately\n- Memory leak tests pass","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T01:28:15.964474+02:00","updated_at":"2025-10-26T18:37:15.004569+01:00","closed_at":"2025-10-26T18:37:15.004569+01:00","dependencies":[{"issue_id":"scotty-10","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.18956+02:00","created_by":"daemon"},{"issue_id":"scotty-10","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T01:28:42.15994+02:00","created_by":"daemon"}]}
{"id":"scotty-11","title":"Instrument WebSocket connections with metrics","description":"Add metrics to WebSocket client management for connection counts, message throughput, and authentication failures.","design":"Instrument WebSocket layer:\n- Track websocket_connections_active\n- Count messages sent/received\n- Track authentication failures\n- Monitor disconnect events","acceptance_criteria":"- Connection lifecycle tracked\n- Message counters increment correctly\n- Auth failure tracking works\n- No overhead on message path","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T01:28:16.086525+02:00","updated_at":"2025-10-26T17:38:41.091932+01:00","closed_at":"2025-10-26T17:38:41.091932+01:00","dependencies":[{"issue_id":"scotty-11","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.272345+02:00","created_by":"daemon"},{"issue_id":"scotty-11","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T01:28:42.23292+02:00","created_by":"daemon"}]}
{"id":"scotty-12","title":"Add observability stack to docker-compose","description":"Create docker-compose.observability.yml with OTel Collector, VictoriaMetrics, and Grafana services. Create OTel Collector configuration file.","design":"Create docker-compose.observability.yml with:\n- otel-collector service (ports 4317/4318)\n- victoriametrics service (port 8428)\n- grafana service (port 3000)\n- Create otel-collector-config.yaml with trace/metrics pipelines\n- Add Traefik labels for ddev.site domains","acceptance_criteria":"- docker-compose up works with observability stack\n- OTel Collector receives metrics on port 4317\n- VictoriaMetrics stores metrics\n- Grafana accessible at grafana.ddev.site\n- No port conflicts with existing services","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T01:28:16.207816+02:00","updated_at":"2025-10-25T01:38:25.612801+02:00","closed_at":"2025-10-25T01:38:25.612801+02:00","dependencies":[{"issue_id":"scotty-12","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.352479+02:00","created_by":"daemon"}]}
{"id":"scotty-13","title":"Create Grafana dashboards for Scotty metrics","description":"Create Grafana dashboard JSON and provisioning config showing unified output system metrics with panels for log streams, shell sessions, WebSocket connections, and tasks.","design":"Create Grafana assets:\n- grafana/provisioning/datasources/datasources.yaml (VictoriaMetrics + Jaeger)\n- grafana/provisioning/dashboards/dashboards.yaml\n- grafana/dashboards/scotty-unified-output.json\n- Panels: active streams, session durations, message rates, error rates","acceptance_criteria":"- Grafana dashboard loads automatically\n- All panels show live data\n- VictoriaMetrics datasource works\n- Dashboard is intuitive and useful\n- Export JSON to git","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T01:28:16.355104+02:00","updated_at":"2025-10-25T15:21:28.683425+02:00","closed_at":"2025-10-25T15:21:28.683425+02:00","dependencies":[{"issue_id":"scotty-13","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.434812+02:00","created_by":"daemon"},{"issue_id":"scotty-13","depends_on_id":"scotty-12","type":"blocks","created_at":"2025-10-25T01:28:42.307778+02:00","created_by":"daemon"}]}
{"id":"scotty-14","title":"Document metrics and observability setup","description":"Write documentation for setting up and using the observability stack, including metrics available, dashboard usage, and troubleshooting.","design":"Documentation:\n- README section on observability\n- docs/observability/setup.md - How to run the stack\n- docs/observability/metrics.md - Available metrics reference\n- docs/observability/dashboards.md - Dashboard guide\n- Troubleshooting common issues","acceptance_criteria":"- Setup instructions are clear and complete\n- Metrics reference documents all instruments\n- Dashboard guide has screenshots\n- Troubleshooting covers common issues\n- Updates to main README.md","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-25T01:28:16.527864+02:00","updated_at":"2025-10-26T18:43:52.600539+01:00","closed_at":"2025-10-26T18:43:52.600539+01:00","dependencies":[{"issue_id":"scotty-14","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.517999+02:00","created_by":"daemon"}]}
{"id":"scotty-15","title":"Upgrade OpenTelemetry dependencies to latest versions","description":"Upgrade opentelemetry, opentelemetry_sdk, and opentelemetry-otlp crates to their latest stable versions to get bug fixes, performance improvements, and new features.","design":"Check current versions in Cargo.toml workspace dependencies:\n- opentelemetry = \"0.28.0\"\n- opentelemetry_sdk = \"0.28\"\n- opentelemetry-otlp = \"0.28.0\"\n\nResearch latest versions on crates.io and upgrade incrementally. Update any API changes in:\n- scotty/src/metrics/init.rs\n- scotty/src/metrics/instruments.rs\n- scotty/src/init_telemetry.rs\n\nTest that traces and metrics still export correctly after upgrade.","acceptance_criteria":"- All opentelemetry crates upgraded to latest stable versions\n- Cargo.toml updated with new versions\n- Code compiles without errors\n- Metrics initialization works\n- Traces export successfully\n- No breaking changes in existing functionality","notes":"Successfully upgraded OpenTelemetry from 0.28 to 0.31 (latest stable version):\n\nUpgraded crates:\n- opentelemetry: 0.28.0 → 0.31.0\n- opentelemetry_sdk: 0.28 → 0.31\n- opentelemetry-otlp: 0.28.0 → 0.31.0 (added grpc-tonic feature)\n- tracing-opentelemetry: 0.29 → 0.32\n- axum-tracing-opentelemetry: 0.26.0 → 0.32.1\n- init-tracing-opentelemetry: 0.27.0 → 0.32.1\n\nAPI changes handled:\n- Fixed TraceError import (moved to opentelemetry_sdk::trace)\n- Updated init_tracerprovider imports (now in otlp::traces module)\n- Fixed TracingConfig import (moved to config module)\n- Added error conversion for init_tracerprovider\n- Fixed build_layer() result handling\n\nRemoved axum-otel-metrics due to version conflict (required 0.30 while ecosystem moved to 0.31). Implemented custom HTTP metrics middleware instead.\n\nImplementation notes:\n- Created scotty/src/metrics/http.rs with custom middleware\n- Tracks http_requests_total, http_request_duration, http_requests_active\n- Fixed telemetry_enabled flag to check for both 'traces' and 'metrics'\n- All metrics exporting correctly to VictoriaMetrics\n- Grafana dashboard updated with correct metric names\n\nCommits: bb28b5cd, 075c755b, 8e297537","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T01:51:52.305855+02:00","updated_at":"2025-10-25T18:54:58.935792+02:00","closed_at":"2025-10-25T18:54:58.935792+02:00","dependencies":[{"issue_id":"scotty-15","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T01:51:52.306614+02:00","created_by":"daemon"}]}
{"id":"scotty-16","title":"Instrument task output streaming with metrics","description":"Add metrics recording to TaskOutputStreamingService for task counts, durations, errors, and output volume.","design":"Instrument TaskOutputStreamingService similar to LogStreamingService:\n- Track tasks_active gauge (current running tasks)\n- Track tasks_total counter (cumulative task count)\n- Add task_output_lines counter (throughput tracking)\n- Add task_errors counter (error tracking)\n- Consider task_duration histogram if tasks have clear lifecycle\n\nLocation: scotty/src/tasks/output_streaming.rs\nPattern: Use metrics::get_metrics() to access global metrics instance","acceptance_criteria":"- Metrics recorded at task start/end\n- Output lines counted\n- Error cases tracked\n- No performance degradation\n- Code compiles and tests pass","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-25T02:29:59.988921+02:00","updated_at":"2025-10-26T18:10:42.53396+01:00","closed_at":"2025-10-26T18:10:42.53396+01:00","dependencies":[{"issue_id":"scotty-16","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T02:29:59.990577+02:00","created_by":"daemon"}]}
{"id":"scotty-17","title":"Add memory usage metrics","description":"Track scotty's memory usage (heap allocated, RSS, etc.) to monitor resource consumption and detect memory leaks.","design":"Add memory metrics to ScottyMetrics struct:\n- memory_heap_bytes (Gauge) - heap allocated memory\n- memory_rss_bytes (Gauge) - resident set size\n- Consider using jemalloc or system metrics crate\n\nOptions:\n1. Use `sysinfo` crate for cross-platform process metrics\n2. Use jemalloc stats if using jemalloc allocator\n3. Sample memory every 30s-60s to avoid overhead\n\nLocation: \n- Add metrics to scotty/src/metrics/instruments.rs\n- Add sampling task to scotty/src/main.rs or metrics/mod.rs\n- Record metrics periodically in background task","acceptance_criteria":"- Memory metrics exported to OTLP\n- Metrics update at reasonable interval (30-60s)\n- Minimal performance overhead\n- Works on all platforms (Linux, macOS)\n- Dashboard panel created for memory tracking","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T02:30:11.101617+02:00","updated_at":"2025-10-25T02:49:17.419136+02:00","closed_at":"2025-10-25T02:49:17.419136+02:00","dependencies":[{"issue_id":"scotty-17","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T02:30:11.102361+02:00","created_by":"daemon"}]}
{"id":"scotty-18","title":"Add Tokio runtime metrics","description":"Track Tokio async runtime statistics like active tasks, worker threads, idle time, and task queue depth to monitor async performance.","design":"Add Tokio runtime metrics to ScottyMetrics:\n- tokio_tasks_active (Gauge) - currently spawned tasks\n- tokio_workers_count (Gauge) - number of worker threads\n- tokio_workers_idle (Gauge) - idle workers\n- tokio_tasks_spawned_total (Counter) - total tasks spawned\n\nImplementation options:\n1. Use tokio-metrics crate (official tokio metrics)\n2. Use tokio::runtime::Handle::metrics() (requires unstable features)\n3. Use tokio-console integration via console-subscriber\n\nRecommended: tokio-metrics crate\n- Add tokio-metrics to Cargo.toml\n- Create background task to sample runtime metrics\n- Record every 10-30s\n\nLocation:\n- Add metrics to scotty/src/metrics/instruments.rs\n- Add tokio metrics sampler in scotty/src/metrics/tokio.rs\n- Spawn sampling task in main.rs after runtime creation","acceptance_criteria":"- Tokio runtime metrics exported to OTLP\n- Metrics show active tasks and worker state\n- Minimal performance overhead\n- Code compiles with stable Rust\n- Dashboard panel created for runtime monitoring","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-25T02:30:22.11133+02:00","updated_at":"2025-10-25T16:17:30.994921+02:00","closed_at":"2025-10-25T16:17:30.994921+02:00","dependencies":[{"issue_id":"scotty-18","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T02:30:22.112175+02:00","created_by":"daemon"}]}
{"id":"scotty-19","title":"Add TaskManager metrics for task tracking","description":"Instrument TaskManager to track number of tasks, their states (running/finished/failed), durations, and success rates.","design":"Add TaskManager metrics to ScottyMetrics struct:\n- tasks_total (Counter) - Total tasks created\n- tasks_by_state (Gauge) - Current tasks grouped by state labels:\n  * state=\"running\"\n  * state=\"finished\"\n  * state=\"failed\"\n- task_duration_seconds (Histogram) - Task execution time\n- task_failures_total (Counter) - Failed tasks counter\n\nImplementation approach:\n1. Add metrics to scotty/src/metrics/instruments.rs\n2. Instrument scotty/src/tasks/manager.rs:\n   - add_task(): increment tasks_total, update state gauge\n   - set_task_finished(): update state gauges, record duration histogram\n   - Optional: background sampler every 30s to sync gauges with HashMap state\n\nData sources:\n- TaskManager.processes HashMap size = total active tasks\n- TaskDetails.state: Running | Finished | Failed\n- TaskDetails.start_time + finish_time for duration calculation\n- TaskDetails.last_exit_code for success/failure tracking","acceptance_criteria":"- Task metrics exported to OTLP\n- Metrics accurately reflect task states\n- Duration tracking works correctly\n- Failed vs successful tasks distinguishable\n- Dashboard panels created for task monitoring\n- No performance degradation","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T02:37:07.454119+02:00","updated_at":"2025-10-25T15:29:19.632177+02:00","closed_at":"2025-10-25T15:29:19.632177+02:00","dependencies":[{"issue_id":"scotty-19","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T02:37:07.454889+02:00","created_by":"daemon"}]}
{"id":"scotty-2","title":"Implement app:shell CLI command in scottyctl","description":"Add the app:shell command to scottyctl CLI. Backend ShellService is fully implemented and tested, but the CLI command is missing. Need to create scottyctl/src/commands/apps/shell.rs with WebSocket-based terminal integration.","design":"- Create ShellCommand struct in cli.rs\n- Implement WebSocket-based shell handler in commands/apps/shell.rs\n- Add TTY resize handling and raw terminal mode\n- Support interactive input/output with proper escape sequences\n- Reuse AuthenticatedWebSocket pattern from logs command","acceptance_criteria":"- scottyctl app:shell myapp web opens interactive shell\n- Terminal escape sequences work correctly\n- Ctrl+C and Ctrl+D handled properly\n- Session cleanup on disconnect\n- Help text and examples documented","status":"in_progress","priority":1,"issue_type":"feature","created_at":"2025-10-25T00:58:21.798713+02:00","updated_at":"2025-10-26T18:37:31.697764+01:00","dependencies":[{"issue_id":"scotty-2","depends_on_id":"scotty-1","type":"parent-child","created_at":"2025-10-25T00:58:32.439042+02:00","created_by":"daemon"}]}
{"id":"scotty-20","title":"Add AppList metrics for application monitoring","description":"Instrument SharedAppList to track number of apps, their states (stopped/starting/running/etc), services per app, and health check age.","design":"Add AppList metrics to ScottyMetrics struct:\n- apps_total (Gauge) - Total number of managed apps\n- apps_by_status (Gauge) - Apps grouped by status labels:\n  * status=\"stopped\"\n  * status=\"starting\"\n  * status=\"running\"\n  * status=\"creating\"\n  * status=\"destroying\"\n  * status=\"unsupported\"\n- app_services_count (Histogram) - Distribution of services per app\n- app_last_check_age_seconds (Histogram) - Time since last health check\n\nImplementation approach:\n1. Add metrics to scotty/src/metrics/instruments.rs\n2. Instrument scotty-core/src/apps/shared_app_list.rs:\n   - add_app() / remove_app(): update apps_total\n   - Background sampler task (30-60s interval):\n     * Iterate apps HashMap\n     * Count by status\n     * Sample services.len() distribution\n     * Calculate last_checked age\n3. Spawn sampler task in scotty/src/main.rs or via AppState\n\nData sources:\n- SharedAppList.apps HashMap size = total apps\n- AppData.status: Stopped | Starting | Running | Creating | Destroying | Unsupported\n- AppData.services.len() = service count per app\n- AppData.last_checked timestamp for age calculation\n\nNote: Requires access to SharedAppList from metrics, may need to pass via background task or add to AppState.","acceptance_criteria":"- App metrics exported to OTLP\n- Metrics accurately reflect app states\n- Status distribution correct\n- Service count distribution tracked\n- Health check age visible\n- Dashboard panels created for app monitoring\n- Minimal performance overhead from sampling","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-25T02:37:26.668911+02:00","updated_at":"2025-10-26T17:20:02.191752+01:00","closed_at":"2025-10-26T17:20:02.191752+01:00","dependencies":[{"issue_id":"scotty-20","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T02:37:26.669776+02:00","created_by":"daemon"}]}
{"id":"scotty-21","title":"Add Traefik to observability docker-compose for .ddev.site URLs","description":"The observability stack uses Traefik labels for routing (grafana.ddev.site, jaeger.ddev.site, vm.ddev.site) but requires external Traefik to be running from apps/traefik. This creates a dependency and extra setup step.\n\nAdd Traefik service to observability/docker-compose.yml so the stack works out-of-the-box without requiring apps/traefik to be running.","design":"Options:\n1. Add Traefik service to observability/docker-compose.yml\n   - Include network configuration\n   - Configure dashboard access\n   - Ensure no port conflicts with main Traefik\n\n2. Share network with existing apps/traefik\n   - Create external network\n   - Less duplication but still requires apps/traefik\n\nRecommended: Option 1 - self-contained observability stack\n\nImplementation:\n- Add Traefik service to observability/docker-compose.yml\n- Use different ports than apps/traefik (80/443 vs 8080/8443)\n- Configure proxy network\n- Update README.md to mention this works standalone","acceptance_criteria":"- grafana.ddev.site, jaeger.ddev.site, vm.ddev.site work without apps/traefik running\n- cd observability \u0026\u0026 docker-compose up -d brings up full working stack\n- No port conflicts with apps/traefik\n- Documentation updated","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T02:59:32.096433+02:00","updated_at":"2025-10-25T02:59:32.096433+02:00"}
{"id":"scotty-22","title":"Refactor metrics instrumentation to use dedicated helper functions","description":"Review and refactor existing metrics code in log streaming and other services to move metrics recording into dedicated helper functions, keeping business logic clean and separated from instrumentation code.","design":"Pattern established in scotty-19:\n- Create dedicated helper functions like `record_task_added_metrics()` and `record_task_finished_metrics()`\n- Move all `if let Some(m) = metrics::get_metrics()` blocks into these helpers\n- Keep business logic methods focused on their primary responsibility\n\nFiles to review and refactor:\n- scotty/src/docker/services/logs.rs (log streaming metrics)\n- scotty/src/docker/services/shell.rs (shell session metrics - if implemented)\n- Any other services with inline metrics code\n\nBenefits:\n- Cleaner separation of concerns\n- Easier to test business logic without metrics\n- Consistent metrics instrumentation pattern\n- Better code readability","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-25T15:28:09.285832+02:00","updated_at":"2025-10-25T16:07:00.885661+02:00","closed_at":"2025-10-25T16:07:00.885661+02:00"}
{"id":"scotty-23","title":"Reduce cloning overhead by wrapping AppData in Arc","description":"AppData is cloned on every access from SharedAppList. Wrapping AppData in Arc would make cloning cheap (just reference count increment) instead of copying all nested structures.","design":"Location: scotty-core/src/apps/shared_app_list.rs:56-58\n\nCurrent code clones entire AppData structure on every get_app() call. AppData contains multiple nested structures (containers, services, settings) making clones expensive.\n\nProposed solution:\n```rust\npub type SharedAppData = Arc\u0026lt;AppData\u0026gt;;\n\npub async fn get_app(\u0026amp;self, app_name: \u0026amp;str) -\u0026gt; Option\u0026lt;SharedAppData\u0026gt; {\n    let t = self.apps.read().await;\n    t.get(app_name).map(Arc::clone)  // Only clones Arc, not data\n}\n```\n\nImpact: Major performance improvement for app data access paths\nEffort: 2-4 hours","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.34027+01:00","updated_at":"2025-10-26T21:21:10.34027+01:00","labels":["performance","refactoring"]}
{"id":"scotty-24","title":"Add timeout to Docker command execution","description":"Docker commands currently have no timeout and could hang indefinitely if Docker daemon becomes unresponsive.","design":"Location: scotty/src/docker/docker_compose.rs:88\n\nCurrent code:\n```rust\nlet output = cmd.output()?;  // No timeout\n```\n\nProposed solution:\n```rust\nuse tokio::time::timeout;\n\nlet output = timeout(\n    Duration::from_secs(300),  // 5 minute timeout\n    tokio::process::Command::new(\"docker-compose\")\n        .args(command)\n        .output()\n).await??;\n```\n\nImpact: Prevents indefinite hangs on Docker failures\nEffort: 1-2 hours","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.406194+01:00","updated_at":"2025-10-26T21:21:10.406194+01:00","labels":["docker","stability"]}
{"id":"scotty-25","title":"Improve authorization error handling in Casbin enforcement","description":"Authorization service silently denies access on Casbin errors using unwrap_or(false), potentially hiding system issues.","design":"Location: scotty/src/services/authorization/service.rs:182\n\nCurrent code:\n```rust\nlet result = enforcer\n    .enforce(vec![user, app, action_str])\n    .unwrap_or(false);\n```\n\nProposed solution:\n```rust\nlet result = enforcer\n    .enforce(vec![user, app, action_str])\n    .map_err(|e| {\n        error!(\"Casbin enforce error: {}\", e);\n        crate::metrics::authorization::record_error();\n    })\n    .unwrap_or(false);\n```\n\nImpact: Better visibility into authorization failures\nEffort: 30 minutes","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.471975+01:00","updated_at":"2025-10-26T21:21:10.471975+01:00","labels":["observability","security"]}
{"id":"scotty-26","title":"Fix wildcard dependency for tracing-subscriber","description":"tracing-subscriber uses wildcard version \"*\" which prevents reproducible builds.","design":"Location: Cargo.toml:36\n\nCurrent: `tracing-subscriber = \"*\"`\nReplace with: `tracing-subscriber = \"0.3\"`\n\nImpact: Reproducible builds\nEffort: 5 minutes","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-26T21:21:10.53848+01:00","updated_at":"2025-10-26T21:21:10.53848+01:00","labels":["dependencies"]}
{"id":"scotty-27","title":"Wrap large configuration structures in Arc","description":"Settings struct contains large nested HashMaps (blueprints, registries) that get cloned unnecessarily. Wrapping them in Arc would reduce clone overhead.","design":"Location: scotty-core/src/settings/apps.rs\n\nSettings contains large, rarely modified structures that are cloned when Settings is cloned.\n\nProposed solution:\n```rust\n#[derive(Clone)]\npub struct Apps {\n    pub root_folder: String,\n    pub blueprints: Arc\u0026lt;HashMap\u0026lt;String, AppBlueprint\u0026gt;\u0026gt;,  // Large, rarely modified\n    // ...\n}\n```\n\nImpact: Reduce Settings clone overhead\nEffort: 1-2 hours","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.606337+01:00","updated_at":"2025-10-26T21:21:10.606337+01:00","labels":["performance","refactoring"]}
{"id":"scotty-28","title":"Consider DashMap for WebSocket client management","description":"WebSocket client HashMap uses Arc\u0026lt;Mutex\u0026lt;HashMap\u0026gt;\u0026gt; which causes lock contention during broadcasts. DashMap provides lock-free reads.","design":"Location: scotty/src/api/websocket/messaging.rs\n\nCurrent implementation uses mutex-protected HashMap which can cause contention during broadcasts to multiple clients.\n\nProposed solution:\n```rust\nuse dashmap::DashMap;\n\npub struct WebSocketMessenger {\n    clients: Arc\u0026lt;DashMap\u0026lt;Uuid, WebSocketClient\u0026gt;\u0026gt;,\n}\n```\n\nBenefits:\n- Lock-free concurrent reads\n- Automatic sharding for better concurrency\n- Reduced contention during broadcasts\n\nImpact: Reduced lock contention during broadcasts\nEffort: 2-3 hours","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.680572+01:00","updated_at":"2025-10-26T21:21:10.680572+01:00","labels":["performance","websocket"]}
{"id":"scotty-29","title":"Split large authorization service file into submodules","description":"The authorization service.rs file is 754 lines and could be split into more focused submodules for better maintainability.","design":"Location: scotty/src/services/authorization/service.rs (754 lines)\n\nProposed structure:\n- service.rs - Core service and main authorization logic\n- permissions.rs - Permission checking and management\n- scopes.rs - Scope-related operations\n- roles.rs - Role management\n- assignments.rs - Assignment handling\n\nImpact: Better code organization and maintainability\nEffort: 2-4 hours","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-26T21:21:10.754914+01:00","updated_at":"2025-10-26T21:21:10.754914+01:00","labels":["maintainability","refactoring"]}
{"id":"scotty-3","title":"Frontend container log viewer UI","description":"Add UI to view container logs in the web frontend. Backend log streaming API is complete with WebSocket support, but frontend has no log viewer component.","design":"- Create log viewer component similar to unified-output.svelte\n- Add WebSocket handlers for LogLineReceived/LogStreamStarted/LogStreamEnded messages\n- Add log viewer page or modal accessible from app detail page\n- Support follow mode, timestamps, line limits\n- Reuse webSocketStore.ts infrastructure","acceptance_criteria":"- Can view historical logs for any service\n- Follow mode for real-time streaming\n- Toggle timestamps on/off\n- Auto-scroll control\n- Copy logs to clipboard\n- Integration from app detail page","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-25T00:58:21.90526+02:00","updated_at":"2025-10-25T01:06:56.395577+02:00","closed_at":"2025-10-25T01:06:56.395577+02:00","dependencies":[{"issue_id":"scotty-3","depends_on_id":"scotty-1","type":"parent-child","created_at":"2025-10-25T00:58:32.507014+02:00","created_by":"daemon"}]}
{"id":"scotty-30","title":"Add metrics for clone operations in hot paths","description":"Add tracing/metrics to performance-critical clone operations to identify actual hotspots with real usage data.","design":"Add instrumentation to measure clone operations in:\n- AppData access patterns\n- Settings propagation\n- State machine handler contexts\n\nUse tracing spans with timing information to identify which clones actually impact performance in production.\n\nThis data will help prioritize which clone operations to optimize first.\n\nImpact: Data-driven optimization decisions\nEffort: 2-3 hours","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-26T21:21:10.829701+01:00","updated_at":"2025-10-26T21:21:10.829701+01:00","labels":["observability","performance"]}
{"id":"scotty-31","title":"Refactor test code organization and extract common helpers","description":"Extract common test helpers and utilities into a dedicated test utilities module to reduce duplication across test files.","design":"Current state: Test code has duplicated setup/teardown logic and helper functions across multiple test files.\n\nProposed:\n- Create `scotty/tests/common/mod.rs` for shared test utilities\n- Extract common fixtures (test users, apps, configurations)\n- Create builder patterns for test data\n- Consolidate mock setup functions\n\nImpact: Reduce test code duplication, easier to maintain tests\nEffort: 4-6 hours","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-26T21:21:10.90688+01:00","updated_at":"2025-10-26T21:21:10.90688+01:00","labels":["maintainability","testing"]}
{"id":"scotty-4","title":"Frontend interactive shell UI with xterm.js","description":"Add interactive shell terminal to web frontend using xterm.js. Backend ShellService is complete with WebSocket support, but frontend has no shell UI.","design":"- Integrate xterm.js for terminal emulation\n- WebSocket handlers for ShellSession* messages\n- TTY resize support on window resize\n- Copy/paste support\n- Terminal settings (font size, theme)\n- Shell session management UI (list, create, terminate)\n- Session timeout indicator","acceptance_criteria":"- Can open interactive shell to any service from web UI\n- Terminal emulation works correctly (colors, escape sequences)\n- Copy/paste functional\n- Terminal resizes properly\n- Session list shows active shells\n- Clean session termination\n- Security: requires Shell permission","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T00:58:22.023108+02:00","updated_at":"2025-10-25T00:58:22.023108+02:00","dependencies":[{"issue_id":"scotty-4","depends_on_id":"scotty-1","type":"parent-child","created_at":"2025-10-25T00:58:32.576268+02:00","created_by":"daemon"},{"issue_id":"scotty-4","depends_on_id":"scotty-3","type":"related","created_at":"2025-10-25T00:58:39.410575+02:00","created_by":"daemon"}]}
{"id":"scotty-5","title":"Enhanced monitoring and observability","description":"Add comprehensive monitoring for the unified output system. Basic logging exists but metrics and tracing are incomplete.","design":"Implementation using OpenTelemetry Collector + VictoriaMetrics architecture.\n\nArchitecture:\n- Scotty exports OTLP metrics to OTel Collector (port 4317)\n- OTel Collector routes traces to Jaeger, metrics to VictoriaMetrics\n- Grafana visualizes metrics from VictoriaMetrics\n- Total memory overhead: ~180-250 MB\n\nSee docs/research/otel-metrics-backend-evaluation.md for complete research and rationale.","acceptance_criteria":"- Prometheus metrics exported\n- Grafana dashboard created\n- Tracing spans for log/shell operations\n- Memory usage tracked\n- Error rates monitored","notes":"Chosen solution: OTel Collector + VictoriaMetrics for lightweight, OpenTelemetry-native metrics collection. Integrates with existing Jaeger setup.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T00:58:22.135422+02:00","updated_at":"2025-10-25T01:28:15.468691+02:00","dependencies":[{"issue_id":"scotty-5","depends_on_id":"scotty-1","type":"parent-child","created_at":"2025-10-25T00:58:32.652182+02:00","created_by":"daemon"}]}
{"id":"scotty-6","title":"End-user documentation for unified output system","description":"Write comprehensive end-user documentation for the logs and shell features. Technical PRD exists but user-facing docs are missing.","design":"- User guide for app:logs command with examples\n- User guide for app:shell command (once CLI implemented)\n- Web UI documentation for log viewer\n- Web UI documentation for shell access\n- Security best practices for shell access\n- Troubleshooting guide\n- Add to main documentation site","acceptance_criteria":"- app:logs documented with all options\n- app:shell documented (when available)\n- Screenshots of web UI features\n- Security guidelines clear\n- Common issues documented\n- Published to docs site","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T00:58:22.241151+02:00","updated_at":"2025-10-25T00:58:22.241151+02:00","dependencies":[{"issue_id":"scotty-6","depends_on_id":"scotty-1","type":"parent-child","created_at":"2025-10-25T00:58:32.723437+02:00","created_by":"daemon"},{"issue_id":"scotty-6","depends_on_id":"scotty-2","type":"related","created_at":"2025-10-25T00:58:39.470922+02:00","created_by":"daemon"}]}
{"id":"scotty-7","title":"Add OpenTelemetry metrics dependencies to workspace","description":"Add metrics feature to opentelemetry and opentelemetry-otlp crates in workspace Cargo.toml. Enable metrics support in opentelemetry_sdk.","design":"Update workspace Cargo.toml:\n- opentelemetry: Add \"metrics\" feature\n- opentelemetry_sdk: Add \"metrics\" to features array\n- opentelemetry-otlp: Add \"metrics\" feature","acceptance_criteria":"- Cargo.toml updated with metrics features\n- cargo check passes\n- No breaking changes to existing trace functionality","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T01:28:15.598548+02:00","updated_at":"2025-10-25T01:32:41.399679+02:00","closed_at":"2025-10-25T01:32:41.399679+02:00","dependencies":[{"issue_id":"scotty-7","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:29.940257+02:00","created_by":"daemon"}]}
{"id":"scotty-8","title":"Create metrics module with ScottyMetrics struct","description":"Create scotty/src/metrics/mod.rs with ScottyMetrics struct containing all metric instruments (counters, gauges, histograms) for unified output system monitoring.","design":"Create metrics module with:\n- ScottyMetrics struct with all instruments\n- init_metrics() function to set up OTLP exporter\n- Metrics for: log streams, shell sessions, WebSocket, tasks, system health\n- Uses opentelemetry::metrics API (Counter, Gauge, Histogram)","acceptance_criteria":"- metrics/mod.rs created and compiles\n- ScottyMetrics struct has all planned metrics\n- init_metrics() successfully initializes MeterProvider\n- Metrics can be recorded without panics","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T01:28:15.721881+02:00","updated_at":"2025-10-25T01:50:03.687196+02:00","closed_at":"2025-10-25T01:50:03.687196+02:00","dependencies":[{"issue_id":"scotty-8","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.027423+02:00","created_by":"daemon"},{"issue_id":"scotty-8","depends_on_id":"scotty-7","type":"blocks","created_at":"2025-10-25T01:28:42.019675+02:00","created_by":"daemon"}]}
{"id":"scotty-9","title":"Instrument log streaming service with metrics","description":"Add metrics recording to LogStreamingService for stream counts, durations, errors, and bytes transferred.","design":"Instrument LogStreamingService:\n- Increment log_streams_active on stream start\n- Increment log_streams_total counter\n- Record log_stream_duration on completion\n- Track log_lines_received and log_stream_bytes\n- Increment log_stream_errors on failures","acceptance_criteria":"- Metrics recorded at stream start/end\n- Duration measured accurately\n- Error cases increment error counter\n- No performance degradation","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-25T01:28:15.847014+02:00","updated_at":"2025-10-25T01:57:04.063722+02:00","closed_at":"2025-10-25T01:57:04.063722+02:00","dependencies":[{"issue_id":"scotty-9","depends_on_id":"scotty-5","type":"parent-child","created_at":"2025-10-25T01:28:30.109241+02:00","created_by":"daemon"},{"issue_id":"scotty-9","depends_on_id":"scotty-8","type":"blocks","created_at":"2025-10-25T01:28:42.089191+02:00","created_by":"daemon"}]}
