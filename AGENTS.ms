# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

Scotty is a Rust-based Micro-PaaS (Platform as a Service) that provides an API to manage Docker Compose-based applications. It consists of three main components:

- **scotty**: HTTP server providing REST API and web UI for managing applications
- **scottyctl**: CLI application for interacting with the Scotty server  
- **scotty-core**: Core library containing shared data structures and settings

## Architecture

Scotty manages applications by:
1. Scanning a configurable apps directory for folders containing `docker-compose.yml` files
2. Reading optional `.scotty.yml` configuration files for app-specific settings
3. Generating `docker-compose.override.yml` files with load balancer configurations (Traefik or HAProxy)
4. Managing app lifecycle (create, start, stop, destroy) with TTL-based auto-cleanup
5. Supporting app blueprints for common deployment patterns

### Authentication Modes

Scotty supports three authentication modes (configured via `auth_mode`):
- **Development**: No authentication required, uses fixed dev user
- **OAuth**: Authentication via oauth2-proxy with GitLab OIDC integration  
- **Bearer**: Traditional token-based authentication

Authentication is handled by the `basic_auth.rs` middleware which extracts user information based on the configured mode.

## Development Commands

### Building and Running

```bash
# Build all workspace members
cargo build

# Run the scotty server
cargo run --bin scotty

# Run the scottyctl CLI
cargo run --bin scottyctl -- help

# Run with specific configuration
SCOTTY__API__AUTH_MODE=dev cargo run --bin scotty
```

### Frontend Development

The frontend is a SvelteKit application with TypeScript:

```bash
cd frontend

# Install dependencies (use bun instead of npm)
bun install

# Run development server  
bun run dev

# Build for production
bun run build

# Lint and format
bun run lint
bun run format
```

### Testing and Quality

```bash
# Run tests for all workspace members
cargo test

# Run tests for specific crate
cargo test -p scotty-core

# Check formatting
cargo fmt --check

# Run clippy linting
cargo clippy --all-targets --all-features
```

### Release Management

```bash
# Update changelog using git-cliff
git cliff > CHANGELOG.md

# Create new release (example for alpha)
cargo release --no-publish alpha -x --tag-prefix ""
```

## Configuration Structure

### Main Configuration Files
- `config/default.yaml`: Base configuration with all settings
- `config/local.yaml`: Local overrides for development
- `config/blueprints/`: App blueprint definitions (drupal-lagoon.yaml, nginx-lagoon.yaml)

### OAuth Development Setup
The `examples/oauth2-proxy/` directory contains a complete OAuth development environment:

```bash
cd examples/oauth2-proxy

# Start in development mode (no auth)
./start-dev.sh dev

# Start with OAuth (requires GitLab app configuration)  
op run --env-file="./.env.1password" -- ./start-dev.sh oauth --build

# Start in bearer token mode
./start-dev.sh bearer
```

### Key Configuration Options

- `auth_mode`: "dev", "oauth", or "bearer"
- `bind_address`: Server bind address (default: "0.0.0.0:21342")
- `apps.root_folder`: Directory to scan for applications
- `load_balancer_type`: "Traefik" or "HaproxyConfig"
- `traefik.network`: Docker network for Traefik integration
- `docker.registries`: Private Docker registry configurations

## App Management

### App Types
- **Owned**: Fully managed by Scotty, can be destroyed
- **Supported**: Can be managed but not destroyed
- **Unsupported**: Read-only, shown in UI but not manageable

### App Structure
```
apps/
‚îú‚îÄ‚îÄ my-app/
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml          # Required
‚îÇ   ‚îú‚îÄ‚îÄ .scotty.yml                 # Optional app settings  
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.override.yml # Generated by Scotty
‚îÇ   ‚îî‚îÄ‚îÄ ... (other app files)
```

### Blueprints
Blueprints provide common deployment patterns and are referenced during app creation. They define lifecycle hooks that execute at specific events (create, run, destroy).

## API and CLI Integration

The API is self-documenting via OpenAPI/Swagger at `/rapidoc` endpoint. The CLI (`scottyctl`) communicates with the server via this REST API using bearer token authentication.

Key environment variables for CLI:
- `SCOTTY_SERVER`: Server URL
- `SCOTTY_ACCESS_TOKEN`: Authentication token

## Load Balancer Integration

Scotty generates appropriate configurations for:

### Traefik (Preferred)
- Uses Docker labels for service discovery
- Supports custom middlewares, basic auth, robots.txt prevention
- Automatic SSL via Let's Encrypt integration

### HAProxy-Config (Legacy)  
- Uses environment variables for configuration
- Limited feature set compared to Traefik

## Development Notes

- Use workspace-level Cargo.toml for shared dependencies
- Frontend uses Bun instead of npm for package management (62% faster builds)
- TypeScript generation optimized with standalone `ts-generator` crate (6s vs 27s)
- All shared types consolidated in `scotty-types` crate (single source of truth)
- Docker builds support multiple platforms (ARM64, x86_64, glibc, musl)
- Conventional commits are enforced via git-cliff
- Pre-push hooks via cargo-husky perform quality checks
- Container apps directory must have identical paths on host and container for bind mounts
- Use conventional commit messages
- **IMPORTANT**: Always run quality checks before committing:
  - Rust code: `cargo fmt` and `cargo clippy`
  - Frontend code: `cd frontend && bun run lint` (runs Prettier and ESLint)
  - If linting fails, run `bun run format` to auto-fix formatting issues

## Current Work in Progress

### Unified Output System Implementation üöß BACKEND COMPLETE, FRONTEND PARTIAL

**Branch:** `feat/better-logs-and-shell`

**Status: Backend fully functional, CLI logs working, frontend task output complete**

**What's Working:**
- ‚úÖ Backend log streaming and shell services (fully tested)
- ‚úÖ CLI `app:logs` command with real-time streaming
- ‚úÖ Frontend task output viewer with WebSocket integration
- ‚úÖ Performance optimizations and security improvements

**What's Missing:**
- ‚ùå CLI `app:shell` command (backend ready, CLI not implemented)
- ‚ùå Frontend container log viewer UI
- ‚ùå Frontend interactive shell UI

### Phase 1 Completed:
- ‚úÖ Unified output data model (OutputLine, TaskOutputData, OutputStreamType)
- ‚úÖ **BREAKING CHANGE IMPLEMENTED**: Removed stdout/stderr from TaskDetails struct
- ‚úÖ Updated TaskManager for unified output collection via WebSocket streaming
- ‚úÖ Added configuration options (OutputSettings, ShellSettings)
- ‚úÖ Extended WebSocket message types for logs, shell, and task output
- ‚úÖ Fixed client-visible status messages

### Phase 2 Completed:
- ‚úÖ Implemented bollard log streaming service with LogStreamingService
- ‚úÖ Implemented bollard shell service with ShellService
- ‚úÖ Added helper methods to AppData for container discovery
- ‚úÖ Improved error handling with enum-based errors (LogStreamError, ShellServiceError)
- ‚úÖ Created API endpoints for logs and shell access
- ‚úÖ Integrated endpoints into router with appropriate permissions
- ‚úÖ Added comprehensive tests (16 tests total) with CI-friendly Docker handling
- ‚úÖ All tests passing, GitHub Actions CI ready

### Phase 3 Partially Completed:
- ‚úÖ **CLI Logs Command**: Fully implemented `app:logs` command with real-time streaming
- ‚úÖ **Shell Backend**: Complete ShellService with REST/WebSocket APIs and session management
- ‚ùå **CLI Shell Command**: `app:shell` NOT implemented in scottyctl (backend is ready)
- ‚úÖ **WebSocket Integration**: Added WebSocket handlers for logs, shell, and task output
- ‚úÖ **Authentication System**: Centralized auth logic in auth_core module, eliminating duplication
- ‚úÖ **Stream Cleanup**: Added proactive client disconnect cleanup for proper resource management
- ‚úÖ **User Experience Improvements**:
  - Reduced idle timeout from 2s to 200ms for faster historical log completion
  - Removed duplicate completion messages for cleaner output
  - Changed timestamps to opt-in with `--timestamps` flag (default: disabled)
- ‚úÖ **WebSocket Authentication**: Implemented message-based authentication flow
- ‚úÖ **Example App**: Added log-demo example app for testing and development
- ‚úÖ **Testing**: 16 comprehensive backend tests, all passing in CI

### Phase 3.5 Completed:
- ‚úÖ **WebSocket Message Consolidation**: Moved all WebSocket message types to `scotty-core/src/websocket/message.rs`
- ‚úÖ **Code Restructuring**: Reorganized API handlers into `api/rest/` and `api/websocket/` directories
- ‚úÖ **Type Consistency**: Eliminated duplicate message definitions between server and client
- ‚úÖ **Import Updates**: Updated 18 files to use consolidated message types from scotty-core
- ‚úÖ **Quality Assurance**: All tests pass, no compilation errors, proper code formatting

### Phase 3.6 Completed:
- ‚úÖ **Task Output WebSocket Streaming**: Implemented real-time task output streaming via TaskOutputData messages
- ‚úÖ **Unified Output Display**: Live stdout/stderr output during all app operations using OutputLine format
- ‚úÖ **Hybrid Implementation**: Combined REST API polling for task status with WebSocket for real-time output
- ‚úÖ **WebSocketMessenger Architecture**: Centralized WebSocket client management and message broadcasting
- ‚úÖ **Stack Overflow Resolution**: Fixed circular reference issues in TaskManager data structures
- ‚úÖ **Resource Cleanup**: Proper WebSocket subscription cleanup during task completion
- ‚úÖ **Breaking Change Complete**: TaskDetails no longer contains stdout/stderr fields

### Phase 3.7 Completed (Infrastructure Optimization):
- ‚úÖ **Build System Optimization**: Created standalone `ts-generator` crate reducing TypeScript generation from 27s to 6s
- ‚úÖ **Type System Consolidation**: Moved all shared types to `scotty-types` crate, eliminated duplication between `scotty-core` and `scotty-types`
- ‚úÖ **Frontend Build Migration**: Switched from npm to bun for 62% faster frontend builds (3.2s vs 5.2s)
- ‚úÖ **Docker Build Optimization**: Fixed platform-agnostic builds with multi-platform Rollup binary support
- ‚úÖ **Import Cleanup**: Updated all imports to use direct dependencies from `scotty-types` instead of re-exports
- ‚úÖ **Workspace Integration**: Added `scotty-types` and `ts-generator` to workspace for better tooling
- ‚úÖ **Legacy Cleanup**: Removed package-lock.json, yarn.lock, and redundant dependencies
- ‚úÖ **Multi-Platform Support**: Docker builds work on ARM64, x86_64, glibc, and musl

### Phase 4 Partially Completed (Frontend Integration):
- ‚úÖ **Unified Output Viewer**: Created `unified-output.svelte` with chronological display, timestamps, auto-scroll
- ‚úÖ **WebSocket-Only Task Output**: Task output uses WebSocket streaming (no REST endpoints)
- ‚úÖ **Real-time Task Streaming**: Live stdout/stderr during all app operations
- ‚úÖ **Task Output Store**: Implemented taskOutputStore.ts for managing streaming data
- ‚úÖ **WebSocket Store**: Connection management and message handling in webSocketStore.ts
- ‚úÖ **Enhanced Task Detail Page**: Real-time output with WebSocket status indicator
- ‚ùå **Container Log Viewer**: Frontend UI for viewing service logs NOT implemented
- ‚ùå **Interactive Shell UI**: xterm.js terminal integration NOT implemented

### Phase 5 Completed (Performance & Reliability):
- ‚úÖ **Deadlock Resolution**: Fixed critical lock contention causing API hangs (commit 160375a2)
- ‚úÖ **Performance Optimization**: Reduced write lock frequency 20-100x (1000/sec ‚Üí 10-50/sec)
- ‚úÖ **TimedBuffer System**: Generic batching utility with configurable thresholds
- ‚úÖ **Memory Management**: Proper output limits, cleanup intervals, resource management
- ‚úÖ **Security Enhancements**: MaskedSecret and SecretHashMap for memory-safe secrets
- ‚úÖ **Error Handling**: Robust enum-based errors (LogStreamError, ShellServiceError)

### Future Work (Phase 6):
- Implement `app:shell` CLI command with terminal integration
- Add container log viewer UI to frontend
- Add interactive shell UI to frontend (xterm.js integration)
- Enhanced monitoring and metrics
- End-user documentation

### Key Commands Available:
```bash
# Log streaming with various options (‚úÖ IMPLEMENTED)
scottyctl app:logs myapp web                    # Historical logs
scottyctl app:logs myapp web --follow           # Real-time streaming
scottyctl app:logs myapp web --timestamps       # With timestamps
scottyctl app:logs myapp web --lines 500        # Custom line count
scottyctl app:logs myapp web --since 1h         # Logs from last hour

# Interactive shell access (‚ùå NOT YET IMPLEMENTED IN CLI)
# Backend is ready, but CLI command needs to be added
# Use REST API directly as workaround: POST /apps/{app}/shell/{service}
```

### Key Files Added/Modified (All Phases):
- `scotty-types/` - **NEW CRATE**: Single source of truth for all shared types including WebSocket messages
- `ts-generator/` - **NEW CRATE**: Standalone TypeScript generation for fast builds (6s vs 27s)
- `scotty-core/src/websocket/message.rs` - **SIMPLIFIED**: Now re-exports from scotty-types
- `scotty-core/src/websocket/mod.rs` - **NEW**: WebSocket module exports
- `scotty/src/api/auth_core.rs` - Centralized authentication logic
- `scotty/src/api/rest/handlers/` - **RESTRUCTURED**: REST API handlers organized by protocol
- `scotty/src/api/websocket/handlers/` - **RESTRUCTURED**: WebSocket handlers (auth, logs, tasks)
- `scotty/src/docker/services/logs.rs` - Complete log streaming implementation (18KB)
- `scotty/src/docker/services/shell.rs` - Complete shell service implementation (18KB)
- `scotty/src/api/websocket/client.rs` - WebSocket client management and cleanup (formerly ws.rs)
- `scotty/src/app_state.rs` - Shared LogStreamingService integration
- `scotty/src/tasks/timed_buffer.rs` - **NEW**: Generic batching utility for performance
- `scottyctl/src/commands/apps/logs.rs` - CLI log streaming command (‚úÖ implemented)
- `scottyctl/src/commands/apps/shell.rs` - ‚ùå **DOES NOT EXIST** - needs to be created for CLI shell support
- `frontend/src/components/unified-output.svelte` - **NEW**: Unified output viewer component
- `frontend/src/stores/taskOutputStore.ts` - **NEW**: Task output WebSocket store
- `frontend/src/stores/webSocketStore.ts` - **NEW**: WebSocket connection management
- `examples/log-demo/` - Demo application for testing
- `Dockerfile` - **OPTIMIZED**: Multi-stage build with bun and platform-agnostic Rollup binaries
- `Cargo.toml` - **UPDATED**: Workspace now includes scotty-types and ts-generator crates

### Key Files Modified (Phase 3.6):
- `scotty/src/api/websocket/messaging.rs` - **NEW**: WebSocketMessenger abstraction for client management
- `scotty/src/tasks/manager.rs` - Refactored to use WebSocketMessenger for output broadcasting
- `scotty/src/app_state.rs` - Updated to create and share WebSocketMessenger instance
- `scottyctl/src/api.rs` - Hybrid approach: REST polling + WebSocket streaming for wait_for_task
- `scottyctl/src/websocket.rs` - **NEW**: Reusable WebSocket utilities and AuthenticatedWebSocket struct

### Latest Commits (All Phases):
- `d3bd5ae0` - refactor(frontend): fix ESLint errors and improve code quality
- `b1983744` - chore: Code style fixes
- `20b3da2e` - fix(frontend): resolve custom actions dropdown reactivity issues
- `5518021e` - chore(frontend): improve UI components and development tooling
- `160375a2` - fix(backend): resolve deadlock and lock contention in task management
- `fef2f3b9` - feat(frontend): implement real-time task output and WebSocket integration
- `41b65f64` - refactor(core): embed TaskOutput directly in TaskDetails for tight coupling
- `24d2250` - refactor: optimize build system and eliminate type duplication (Phase 3.7)
- `71d155e` - feat(websocket): implement real-time task output streaming for Phase 3.6
- `ee1875d` - refactor(websocket): consolidate message types in scotty-core (Phase 3.5)

### Reference Documents:
- `docs/prds/unified-output-system.md` - Complete PRD and technical specifications
- `docs/technical-spike-bollard-findings.md` - Bollard API validation results
- the build files of scotty_frontend will be embedded into scotty, so restart scotty after the frontend files got rebuilt